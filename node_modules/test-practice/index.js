// Truthy and Falsy versus true and false - first part of the day

//const myArray = [null, 1, 'one', undefined, 34, -1, 0, false, true, ""];

//check if the element is truthy or falsy 

// for (let index = 0; index < myArray.length; index++) {
   
//     if(myArray[index]){
//    console.log(myArray[index] + " is truthy")
// } else {
//     console.log(myArray[index] + " is falsy")
// }
// }


//Comaprison
// console.log(3+4 ==7);
// console.log(3+4 !=7);
// console.log(3+4 ===7);
// console.log(3+4 === "7");
// console.log(3+4 !="7");
// console.log(3+4 !=="7");


// let name ="mishi"
// let age = 15;
// const driveCar = () => {
//     console.log('Vroom!');
// }
// Obs!the function above can be writen as 
// const driveCar = () => console.log('Vroom!')
// Note! the ternari method to write if else statement
// age > 16 ? driveCar() : console.log('sorry too young')
//age > 16 && driveCar();

//if we are in a county where uzair gets to always drive but the age of driving is normarlly 25 
// if(name === "uzair"){
//     driveCar();
// } else if (age >=25){
//     driveCar();
// }else {
//     console.log("sad face");
// }

//written with switch case
// switch(age){
//     case 12:
//         console.log("way too young");
//         break;
//     case 13:
//     case 14:
//     case 15:
//         console.log("still too young to drive");
//         break;
//     case 16: 
//         console.log("you are just old enough to drive");
//         break;
//     default: 
//         console.log("enjoy you new bmw");
//         break;
    
// }

//iteration: 
// - while..do, 
// - do..while (unlike while..do, it passes at least once trhough the loop), 
// - for 


// let i=0;

// while(i>3){
//     console.log(i + " is using while statement");
//     i++;
// }

// do {
//     console.log(i + " is using do...while statement");
// } while (i>3)

// const myArray = ["mike", "sarah", "simon", "ree"]
// for(let num =0; num<myArray.length; num++){
//     console.log("hi " + myArray[num])
// }

//obs! when using arraies you can switch to for...of
// when using objects you can switch to for...in

// for(const personName of myArray) {
//     console.log("hi " + personName)
// }

// const object = {a:1, b:2, c:3}
// for(const property in object){
//     console.log(`${property}: ${object[property]}`)
// }

// const people = [
//     {name: 'tom', age: 30, location:'manc', pets:1},
//     {name: 'ri', age: 33, location:'northampton', pets:2},
//     {name: 'simon', age: 40, location:'london', pets:3}
// ]

// for(const element of people){
//     for(const property in element){
//         console.log(`${property}: ${element[property]}`)
//     }
// }

// const myArray = ["mike", "sarah", "simon", "ree"];

// first method of running through the elements of an array with a function
// function doThis(item){
//     console.log(item + " is an item")
// }
// myArray.forEach(doThis);

//second method of running through the elements of an array with a function
// myArray.forEach(element => {
//     console.log(element + " is an item");
// })

//other methods for arraies map, some, filter, reduce

// const array1 = ['ham', 'cheese', 'pepperoni', 'chicken']

//map() is used to create a new array containing the newly reformatted objects; so, it is similar to views in database in that it builds on an existing data to create something new based on given condition(s)
// it pasess three arguments: the element, the index, and the array
// exercises: use the function to make the first letter of each element upper case
// const array1stUpperCase = array1.map(element => element.charAt(0).toUpperCase() + element.slice(1));
// console.log(array1stUpperCase)


//some() is used to test whether at least one element is the array passes the test implemented by the provided function; it returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false; obs! keeps the array as it is
//it pasess three arguments also: the element, the index, and the array
//exercise: 

// const elementC = (element) => element[0] =='h'
// console.log(array1.some(elementC))

//filter()

// const filterArray = array1.filter(element => element[0] === 'p')
// console.log(filterArray)

//sum()
// const num = [12,23,23,34,35]
// const initialValue=200;
// const sumWithInitial = num.reduce(
//     (previousValue, currentValue) => previousValue + currentValue,
//     initialValue
// );
// console.log(sumWithInitial)


// let itemName = "scarf";
// let countItem = 0;
// countItem > 1 ? console.log(`I have ${countItem} ${itemName}s`) : 
// countItem == 1 ? console.log(`I have ${countItem} ${itemName}`) : console.log('try again')

//exercises
// let row= "& & & & & "

// for(let i=0; i<10; i++){
  
//    if(i%2===0) {
//     console.log(row) 
//    } else {
//     var splitRow = row.split("");
//     var reverseArray = splitRow.reverse();
//     var joinArray = reverseArray.join("");
//     console.log(joinArray)
//    }
// }



//Actions in JS - second part of the day

// function badgeMaker() {
//     let firstName = "Bob";
//     return firstName.toUpperCase();
// }

// console.log(badgeMaker())

//catching errors could be done by:
// a) assigning defaults values
// const badgeMaker = (firstName = "Florencia") =>{
//      return firstName.toUpperCase();
// }

// b)checking the conditions
// const badgeMaker = (firstName) =>{
//      return firstName && firstName.toUpperCase();
// }


// const badgeMaker = (firstName, lastName, role = "student") =>{
//      return `${role}: ${firstName} ${lastName}`;
// }

// console.log(badgeMaker("allan", "stocco", "student"));
// console.log(badgeMaker("ree", "gilling", "trainer"));

//use recursion to find if a particular name is present
//using the binary search method (known as a half-interval search, is a faster method for searching for an item that is in an ordered list)

const namesList = ["misi", "taro", "tom", "ree", "simon", "sanna", "daiana"];
const personToFind = "taro";
let searchCount = 0;

function binarySearch(namesList, personToFind) {
    searchCount++;
    if(namesList.length === 1) {
        console.log(`found ${namesList[0]} after ${searchCount} searches`);
        return;
    }

    const firstHalf = namesList.slice(0, namesList.length / 2);
    const secondHalf = namesList.slice(namesList.length/2);
    debugger;
    firstHalf.includes(personToFind) ? binarySearch(firstHalf, personToFind) : binarySearch(secondHalf, personToFind)
}


binarySearch(namesList, personToFind)
